{
  "name": "recli",
  "version": "0.2.4",
  "author": {
    "name": "Stian Grytøyr"
  },
  "description": "RethinkDB CLI query tool and REPL",
  "main": "index.js",
  "preferGlobal": true,
  "dependencies": {
    "coffee-script": "1.7.x",
    "js-yaml": "3.0.x",
    "optimist": "0.6.x",
    "repl.history": "0.1.x",
    "rethinkdb": "^2.3.1"
  },
  "devDependencies": {
    "mocha": "1.12.x"
  },
  "bin": {
    "recli": "./bin/recli.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/stiang/recli.git"
  },
  "keywords": [
    "rethinkdb",
    "reql",
    "database",
    "cli"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/stiang/recli/issues"
  },
  "contributors": [
    {
      "name": "Stian Grytøyr",
      "email": "stian@grytoyr.net"
    },
    {
      "name": "Luc Heinrich",
      "email": "luc@honk-honk.com"
    },
    {
      "name": "Marshall Cottrell"
    },
    {
      "name": "StreetStrider"
    },
    {
      "name": "Howard Tyson"
    }
  ],
  "scripts": {
    "test": "mocha -R spec ./test.js"
  },
  "readme": "## recli - RethinkDB CLI query tool and REPL\n**recli** is a command-line query tool and REPL for RethinkDB, with lots of options to control its output. It supports regular JavaScript syntax and CoffeeScript syntax.\n\n### Installation\nInstall recli using npm:\n```\nsudo npm install -g recli\n```\nThis will give you a global `recli` command. If you prefer or need to install it locally, just drop the \"sudo\" and \"-g\". In that case, you can invoke it like so:\n```\nnode ./node_modules/recli\n```\nor\n```\n./node_modules/recli/bin/recli.js\n```\n\nYou can of course create an alias to be able to type \"recli\", as if you had recli installed globally, just put something like this in your ~/.bash_profile or equivalent:\n```\nalias recli='YOURDIR/node_modules/recli/bin/recli.js'\n```\n\n### Usage\nrecli can either take a ReQL expression as an argument or be used as a REPL, which lets you type in ReQL expressions in a special shell and see the results immediately.\n\nHere’s how you would use it from the command line:\n```\n$ recli 'r.table(\"bikes\")'\n... (JSON output) ...\n\n$ recli 'r.table(\"bikes\").get(\"123\").update({foo: \"bar\"})'\n... (JSON output) ...\n```\n\nIf you don’t supply a ReQL expression on the command-line, recli will start a REPL for ReQL queries, like so:\n```\n$ recli\nrecli> r.table(\"bikes\")\n... (JSON output) ...\nrecli> r.table(\"bikes\").get(\"123\").update({foo: \"bar\"})\n... (JSON output) ...\n```\nNote that results from queries that return a cursor are automatically converted to arrays and printed as JSON documents.\n\n### Output\nThe default output from recli is a color-coded and pretty-formatted RethinkDB query result. It uses node’s util.inspect method, which means that it is actually a string representation of a Javascript object and NOT (by default) strictly valid JSON:\n```js\n$ recli 'r.table(\"heroes\")'\n[ { hero: 'Magneto',\n    name: 'Max Eisenhardt',\n    aka: ['Magnus', 'Erik Lehnsherr', 'Lehnsherr'],\n    magazine_titles:\n     [ 'Alpha Flight',\n       'Avengers',\n       'Avengers West Coast' ],\n    appearances_count: 42 },\n  { hero: 'Professor Xavier',\n    name: 'Charles Francis Xavier',\n    magazine_titles:\n     [ 'Alpha Flight',\n       'Avengers',\n       'Bishop',\n       'Defenders' ],\n    appearances_count: 72 },\n  { hero: 'Storm',\n    name: 'Ororo Monroe',\n    magazine_titles:\n     [ 'Amazing Spider-Man vs. Wolverine',\n       'Excalibur',\n       'Fantastic Four',\n       'Iron Fist' ],\n    appearances_count: 72 } ]\n```\nNote that colors can be disabled by using the `-n`/`--no-colors` option.\n\nIf you want valid JSON instead, but still nicely indented and readable, use the `-j`/`--json` option:\n```\n$ recli -j 'r.table(\"heroes\")'\n[ \n  { \n    \"hero\": \"Magneto\",\n    \"name\": \"Max Eisenhardt\",\n    \"aka\": [\n      \"Magnus\", \n      \"Erik Lehnsherr\", \n      \"Lehnsherr\"\n    ],\n    \"magazine_titles\": [ \n      \"Alpha Flight\",\n      \"Avengers\",\n      \"Avengers West Coast\"\n    ],\n    \"appearances_count\": 42\n  },\n  { \n    \"hero\": \"Professor Xavier\",\n    \"name\": \"Charles Francis Xavier\",\n    \"magazine_titles\": [\n      \"Alpha Flight\",\n      \"Avengers\",\n      \"Bishop\",\n      \"Defenders\"\n    ],\n    \"appearances_count\": 72\n  },\n  { \n    \"hero\": \"Storm\",\n    \"name\": \"Ororo Monroe\",\n    \"magazine_titles\": [\n      \"Amazing Spider-Man vs. Wolverine\",\n      \"Excalibur\",\n      \"Fantastic Four\",\n      \"Iron Fist\"\n    ],\n    \"appearances_count\": 72\n  }\n]\n```\n\nIf you want raw, unformatted and unindented JSON, use the `-r`/`--raw` option. This isn’t straight-from-the-wire raw, though, it is the JSON.stringify-ed version of the RethinkDB result data (as returned by the JavaScript driver).\n\n### CoffeeScript input\nIf you prefer to use the CoffeeScript syntax, use the `-c`/`--coffee` option:\n```\n$ recli -c 'r.table \"bikes\"'\n... (JSON output) ...\n```\n\n### Database and connection options\nYou can specify the database, host and port to connect to with the `-d`/`--database`, `-h`/`--host` and `-p`/`--port` options. \n\nUse `--help` to get the full usage info:\n```\n$ recli --help\nUsage: recli [options] [ReQL expression]\n\nREPL mode:\n    If the ReQL expression is omitted, recli will enter REPL mode,\n    which is a CLI where you can evaluate ReQL expressions.\n\nREQL EXPRESSION:\n    A ReQL expression is anything that works in RethinkDB's Data\n    Explorer, for example\n\n          r.table('bikes').filter({brand: 'Scott'})\n\n          r.table('bikes').get('123').update({foo: 'bar'})\n\nOPTIONAL options:\n    -c, --coffee               Evaluate code as CoffeeScript.\n\n    -d, --database DATABASE    Default database to perform queries against.\n                               Can be overridden in the ReQL expression.\n                               The default is 'test'.\n\n    -f, --file FILE            Read options from the supplied YAML config\n                               file. The default is to look for a global \n                               /etc/recli.yml and user overrides in ~/.recli.yml\n\n    -h, --host HOST            Host to connect to. The default is 'localhost'.\n\n    -j, --json                 Output valid indented JSON instead of pretty-\n                               printing the result.\n\n    -n, --no-colors            Do not use colors when pretty-printing.\n\n    -p, --port PORT            TCP port to connect to. The default is 28015.\n\n    -r, --raw                  Print the raw JSON from RethinkDB, with no\n                               formatting applied.\n\n    -s, --stream               Print a line break delimited JSON stream with one\n                               valid JSON object per line.\n\n    -v, --version              Print the current version of recli.\n```\nAny options specified on the command line take precedence over defaults and configuration file settings.\n\nNote that the `--coffee`, `--file`, `--json` and `--raw` options also support the `--no-<option>` syntax, like `--no-json`. This lets you override all configuration file settings.\n\n### Configuration files\nrecli will look for YAML configuration files in `/etc/recli.yml` and `~/.recli.yml` by default. The user config overrides the global config. You can specify another configuration file by using the `-f`/`--file` option, in which case none of the default files are loaded.\n\nThe keys and values in the configuration files must match the (long-form) options that can be used on the command line (use `true` and `false` for flags):\n```yaml\n# set default connection options\ndatabase: mydb\nhost: server1\n\n# output valid JSON by default\njson: true\n\n# prefer to use CoffeeScript input\ncoffee: true\n```\n\n### REPL history\nrecli remembers commands that you run in the REPL (between sessions), which gives you access to previously run commands by pressing arrow-up. The history is stored in ~/.recli_history. There is currently no way to disable the history feature.\n\n### Author\nStian Grytøyr\n\n### Contributors\n* Luc Heinrich\n* Marshall Cottrell\n* StreetStrider\n* Howard Tyson\n\n### Licence\n[The MIT License](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "recli@0.2.4",
  "dist": {
    "shasum": "caa8e1f911297459a9a9d539871838fb1849e2d6"
  },
  "_from": "recli@",
  "_resolved": "https://registry.npmjs.org/recli/-/recli-0.2.4.tgz"
}
